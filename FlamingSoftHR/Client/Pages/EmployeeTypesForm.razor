@page "/employeeTypesForm" // route to add new employee type
@page "/employeeTypesForm/{Id:int}" // route to edit a record

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject HttpClient Http
@inject NavigationManager navigationManager

@if (Id == 0)
{
    <h3>Add new employee type</h3>
}
else
{
    <h3>Edit employee type data</h3>
}

<EditForm Model="@oEmployeeType">
    <div class="container-fluid">
        <div class="form-group row mb-1">
            <label class="col-sm-3">Description</label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="@oEmployeeType.Description"></InputText>
            </div>
        </div>
        <div class="form-group row mb-1">
            <div class="col-sm-12">
                <button class="btn btn-primary" @onclick="Add">Save</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; } //Parameter to edit a record

    EmployeeType oEmployeeType = new EmployeeType();
    Response<object>? oResponse = new Response<object>();
    Response<EmployeeType>? oResponseEmployeeType = new Response<EmployeeType>();
    public string Url = "api/EmployeeType/"; // Defines url of the API response

    private async Task Add()
    {
        if (Id == 0) //On click method to add new department to db
        {
            var response = await Http.PostAsJsonAsync<EmployeeType>(Url, oEmployeeType); //Populate EmployeeType object with data from interface
            oResponse = response.Content.ReadFromJsonAsync<Response<object>>().Result; //Deserialize Department to a generic object
        }
        else //On click method to edit record from db
        {
            var response = await Http.PutAsJsonAsync<EmployeeType>(Url, oEmployeeType);
            oResponse = response.Content.ReadFromJsonAsync<Response<object>>().Result;
        }
        navigationManager.NavigateTo("/employeeTypes"); //Returns to list page
    }

    //Get a record from db
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Id != 0)
            {
                oResponseEmployeeType = await Http.GetFromJsonAsync<Response<EmployeeType>>(Url + Id);
                oEmployeeType = oResponseEmployeeType.Data;
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
